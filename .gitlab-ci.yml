stages:
  - prebuild
  - build
  - deploy

#default:
#  stage: prebuild
#  image: lexauw/ansible-alpine
#  before_script:
#    - ansible-galaxy install -r requirements.yml
#  cache:
#    paths:
#      - .imported_roles
#  when: manual

##provision-s3-buckets:
#  script:
#    - ansible-playbook s3-buckets.yml

build-docker-builder:
  stage: prebuild
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/prebuild:latest || true
    - docker build --build-arg GITHUB_PAT=$GITHUB_PAT --build-arg PKG_COMMIT=$PKG_COMMIT --cache-from $CI_REGISTRY_IMAGE/prebuild:latest --tag $CI_REGISTRY_IMAGE/prebuild:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/prebuild:latest prebuild
    - docker push $CI_REGISTRY_IMAGE/prebuild:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/prebuild:latest
  only:
    changes:
      - prebuild/*
  when: always

build-postgres-image:
  stage: build
  image: $CI_REGISTRY_IMAGE/prebuild:latest
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $GIT_ENCRYPT_KEY64 | base64 --decode > git_crypt_key.key && git-crypt unlock git_crypt_key.key
  script:
    - cd repeldb && docker-compose build
  when: always

#provision-postgres-server:
#  stage: provision
#  script:
#    - ansible-playbook ec2-postgis-server.yml
#  dependencies:
#    - build-postgres-image
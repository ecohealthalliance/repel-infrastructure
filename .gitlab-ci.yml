stages:
  - prebuild
  - build
  - deploy


#default:
#  stage: prebuild
#  image: lexauw/ansible-alpine
#  before_script:
#    - ansible-galaxy install -r requirements.yml
#  cache:
#    paths:
#      - .imported_roles
#  when: manual

##provision-s3-buckets:
#  script:
#    - ansible-playbook s3-buckets.yml

build-docker-builder:
  stage: prebuild
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/prebuild:latest || true
    - docker build --build-arg GITHUB_PAT=$GITHUB_PAT --build-arg PKG_COMMIT=$PKG_COMMIT --cache-from $CI_REGISTRY_IMAGE/prebuild:latest --tag $CI_REGISTRY_IMAGE/prebuild:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/prebuild:latest prebuild
    - docker push $CI_REGISTRY_IMAGE/prebuild:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/prebuild:latest
  only:
    changes:
      - prebuild/*
  when: always

build-postgres-image:
  stage: build
  image: $CI_REGISTRY_IMAGE/prebuild:latest
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $GIT_ENCRYPT_KEY64 > git_crypt_key.key64 && base64 -d git_crypt_key.key64 > git_crypt_key.key && git-crypt unlock git_crypt_key.key
  script:
    - cd repeldb
    - docker-compose build --pull
    - docker-compose push
  when: always

deploy-app:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/prebuild:latest
  when: manual
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $GIT_ENCRYPT_KEY64 > git_crypt_key.key64 && base64 -d git_crypt_key.key64 > git_crypt_key.key && git-crypt unlock git_crypt_key.key
  script:
    - set -a; source repeldb/.env; set +a
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -p "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no $(pwd) ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL}:~/${DEPLOYMENT_SERVER_DIR}
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" ssh -p "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL} "echo ${$DEPLOYMENT_SERVER_PASS} | sudo -S ls && docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; cd ${DEPLOYMENT_SERVER_DIR}; sudo docker-compose pull; sudo docker-compose up -d;"

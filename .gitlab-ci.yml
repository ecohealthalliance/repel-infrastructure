stages:
  - build
  - deploy


#default:
#  stage: prebuild
#  image: lexauw/ansible-alpine
#  before_script:
#    - ansible-galaxy install -r requirements.yml
#  cache:
#    paths:
#      - .imported_roles
#  when: manual

##provision-s3-buckets:
#  script:
#    - ansible-playbook s3-buckets.yml

build-postgres-image:
  stage: build
  image: ecohealthalliance/docker-compose-git-crypt
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - gitlab-ci/build_before.sh
  script:
    - gitlab-ci/build.sh
  when: always

# test comment
deploy-app:
  stage: deploy
  image: ecohealthalliance/docker-compose-git-crypt
  when: manual
  services:
    - docker:19.03.1-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - gitlab-ci/deploy_before.sh
  script:
    - set -a; source .env; set +a
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" ssh -p "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL} "mkdir -p ~/${DEPLOYMENT_SERVER_DIR}"
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -r -P "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no $(pwd) ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL}:~/
    - if [ "$RESTORE_PG_FROM_AWS" == "1" ]; then sshpass -p "${DEPLOYMENT_SERVER_PASS}" ssh -p "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL} "echo ${DEPLOYMENT_SERVER_PASS} | sudo -S ls && cd ${DEPLOYMENT_SERVER_DIR}; sudo docker-compose down --volumes"; fi
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" ssh -p "${DEPLOYMENT_SERVER_SSH_PORT}" -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_URL} "echo ${DEPLOYMENT_SERVER_PASS} | sudo -S ls && echo ${CI_REGISTRY_PASSWORD} | sudo docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}; cd ${DEPLOYMENT_SERVER_DIR}; sudo docker-compose pull; sudo docker-compose up -d;"

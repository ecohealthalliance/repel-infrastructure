version: '3'

services:
  postgres:
    image: registry.gitlab.com/ecohealthalliance/repel-infrastructure/repel-postgres
    build:
      context: './postgres'
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/pgconf:/pgconf
    command: postgres -c config_file=/pgconf/postgresql.conf
    env_file: .env
    restart: on-failure
  cron:
    image: registry.gitlab.com/ecohealthalliance/repel-infrastructure/repel-cron
    build:
      context: './cron'
    links:
      - postgres:postgres
    env_file: .env
    environment:
      - BACKUP_FLAG=yes
    restart: on-failure
    depends_on:
      - postgres
  scraper:
    image: registry.gitlab.com/ecohealthalliance/repel-infrastructure/repel-scraper
    build:
      context: './scraper'
      args:
        - GITHUB_PAT=${GITHUB_PAT}
    env_file: .env
    environment:
      - IS_LOCAL=no
    links:
      - postgres:postgres
    restart: on-failure
    depends_on:
      - postgres
    volumes:
      - shiny-content:/var/www/html
  rshinyauth0:
    image: registry.gitlab.com/ecohealthalliance/repel-infrastructure/repel-rshinyauth0
    build:
      context: './rshinyauth0'
    restart: on-failure
    working_dir: /home/node/app
    env_file: .env
    environment:
      NODE_ENV: production
      IS_LOCAL: "no"
    networks:
      - repel-servers
  shinyserver:
    image: registry.gitlab.com/ecohealthalliance/repel-infrastructure/shiny
    build:
      context: './shiny'
    restart: always
    env_file: .env
    ports:
      - 3838:3838
    volumes:
      - shiny-content:/srv/shiny-server
    networks:
      - repel-servers
volumes:
  shiny-content:
networks:
  repel-servers:
    driver: bridge
